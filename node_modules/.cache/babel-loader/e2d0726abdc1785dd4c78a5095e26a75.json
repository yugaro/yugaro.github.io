{"ast":null,"code":"import _classCallCheck from\"/Users/yuga/GitHub/mypage/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/yuga/GitHub/mypage/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/yuga/GitHub/mypage/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/yuga/GitHub/mypage/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React from'react';import'./ContactForm.css';var ContactForm=/*#__PURE__*/function(_React$Component){_inherits(ContactForm,_React$Component);var _super=_createSuper(ContactForm);function ContactForm(props){var _this;_classCallCheck(this,ContactForm);_this=_super.call(this,props);_this.state={isSubmitted:false,email:'',hasEmailError:false,/* contentとhasContentErrorというstateを追加してください */content:'',hasContentError:false};return _this;}_createClass(ContactForm,[{key:\"handleEmailChange\",value:function handleEmailChange(event){var inputValue=event.target.value;var isEmpty=inputValue==='';this.setState({email:inputValue,hasEmailError:isEmpty});}/* handleContentChangeという名前のメソッドを定義してください */},{key:\"handleContentChange\",value:function handleContentChange(event){var inputValue=event.target.value;var isEmpty=inputValue==='';this.setState({content:inputValue,hasContentError:isEmpty});}},{key:\"handleSubmit\",value:function handleSubmit(){this.setState({isSubmitted:true});}},{key:\"render\",value:function render(){var _this2=this;var emailErrorText;if(this.state.hasEmailError){emailErrorText=/*#__PURE__*/React.createElement(\"p\",{className:\"contact-message-error\"},\"\\u30E1\\u30FC\\u30EB\\u30A2\\u30C9\\u30EC\\u30B9\\u3092\\u5165\\u529B\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\");}/* 変数contentErrorTextを定義してください */var contentErrorText;/* hasContentErrorを条件にしたif文を作成してください */if(this.state.hasContentError){contentErrorText=/*#__PURE__*/React.createElement(\"p\",{className:\"contact-message-error\"},\"\\u304A\\u554F\\u3044\\u5408\\u308F\\u305B\\u5185\\u5BB9\\u3092\\u5165\\u529B\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\");}var contactForm;if(this.state.isSubmitted){contactForm=/*#__PURE__*/React.createElement(\"div\",{className:\"contact-submit-message\"},\"\\u9001\\u4FE1\\u5B8C\\u4E86\");}else{contactForm=/*#__PURE__*/React.createElement(\"form\",{onSubmit:function onSubmit(){_this2.handleSubmit();}},/*#__PURE__*/React.createElement(\"p\",null,\"e-mail adress\"),/*#__PURE__*/React.createElement(\"input\",{value:this.state.email,onChange:function onChange(event){_this2.handleEmailChange(event);}}),emailErrorText,/*#__PURE__*/React.createElement(\"p\",null,\"contents\"),/*#__PURE__*/React.createElement(\"textarea\",{value:this.state.content,onChange:function onChange(event){_this2.handleContentChange(event);}}),contentErrorText,/*#__PURE__*/React.createElement(\"input\",{type:\"submit\",value:\"submit\"}));}return/*#__PURE__*/React.createElement(\"div\",{className:\"contact-form\"},contactForm);}}]);return ContactForm;}(React.Component);export default ContactForm;","map":{"version":3,"sources":["/Users/yuga/GitHub/mypage/src/components/Main/ContactForm/ContactForm.js"],"names":["React","ContactForm","props","state","isSubmitted","email","hasEmailError","content","hasContentError","event","inputValue","target","value","isEmpty","setState","emailErrorText","contentErrorText","contactForm","handleSubmit","handleEmailChange","handleContentChange","Component"],"mappings":"gjBAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAO,mBAAP,C,GAEMC,CAAAA,W,sHACJ,qBAAYC,KAAZ,CAAmB,6CACjB,uBAAMA,KAAN,EACA,MAAKC,KAAL,CAAa,CACXC,WAAW,CAAE,KADF,CAEXC,KAAK,CAAE,EAFI,CAGXC,aAAa,CAAE,KAHJ,CAIX,8CACAC,OAAO,CAAC,EALG,CAMXC,eAAe,CAAC,KANL,CAAb,CAFiB,aAUlB,C,oFAEiBC,K,CAAO,CACvB,GAAMC,CAAAA,UAAU,CAAGD,KAAK,CAACE,MAAN,CAAaC,KAAhC,CACA,GAAMC,CAAAA,OAAO,CAAGH,UAAU,GAAK,EAA/B,CACA,KAAKI,QAAL,CAAc,CACZT,KAAK,CAAEK,UADK,CAEZJ,aAAa,CAAEO,OAFH,CAAd,EAID,CAED,4C,gEACoBJ,K,CAAM,CACxB,GAAMC,CAAAA,UAAU,CAACD,KAAK,CAACE,MAAN,CAAaC,KAA9B,CACA,GAAMC,CAAAA,OAAO,CAAGH,UAAU,GAAK,EAA/B,CACA,KAAKI,QAAL,CAAc,CACZP,OAAO,CAACG,UADI,CAEZF,eAAe,CAACK,OAFJ,CAAd,EAID,C,mDAEc,CACb,KAAKC,QAAL,CAAc,CAACV,WAAW,CAAE,IAAd,CAAd,EACD,C,uCAEQ,iBACP,GAAIW,CAAAA,cAAJ,CACA,GAAI,KAAKZ,KAAL,CAAWG,aAAf,CAA8B,CAC5BS,cAAc,cACZ,yBAAG,SAAS,CAAC,uBAAb,qGADF,CAKD,CAED,iCACA,GAAIC,CAAAA,gBAAJ,CAEA,uCACA,GAAI,KAAKb,KAAL,CAAWK,eAAf,CAAgC,CAC9BQ,gBAAgB,cACd,yBAAG,SAAS,CAAC,uBAAb,2GADF,CAKD,CAED,GAAIC,CAAAA,WAAJ,CACA,GAAI,KAAKd,KAAL,CAAWC,WAAf,CAA4B,CAC1Ba,WAAW,cACT,2BAAK,SAAS,CAAC,wBAAf,6BADF,CAKD,CAND,IAMO,CACLA,WAAW,cACT,4BAAM,QAAQ,CAAE,mBAAM,CAAC,MAAI,CAACC,YAAL,GAAoB,CAA3C,eACE,6CADF,cAEE,6BACE,KAAK,CAAE,KAAKf,KAAL,CAAWE,KADpB,CAEE,QAAQ,CAAE,kBAACI,KAAD,CAAW,CAAC,MAAI,CAACU,iBAAL,CAAuBV,KAAvB,EAA8B,CAFtD,EAFF,CAMGM,cANH,cAOE,wCAPF,cASE,gCACE,KAAK,CAAE,KAAKZ,KAAL,CAAWI,OADpB,CAEE,QAAQ,CAAE,kBAACE,KAAD,CAAW,CAAC,MAAI,CAACW,mBAAL,CAAyBX,KAAzB,EAAgC,CAFxD,EATF,CAcGO,gBAdH,cAeE,6BACE,IAAI,CAAC,QADP,CAEE,KAAK,CAAC,QAFR,EAfF,CADF,CAsBD,CAED,mBACE,2BAAK,SAAS,CAAC,cAAf,EACGC,WADH,CADF,CAKD,C,yBA/FuBjB,KAAK,CAACqB,S,EAkGhC,cAAepB,CAAAA,WAAf","sourcesContent":["import React from 'react';\nimport './ContactForm.css';\n\nclass ContactForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isSubmitted: false,\n      email: '',\n      hasEmailError: false,\n      /* contentとhasContentErrorというstateを追加してください */\n      content:'',\n      hasContentError:false\n    };\n  }\n\n  handleEmailChange(event) {\n    const inputValue = event.target.value;\n    const isEmpty = inputValue === '';\n    this.setState({\n      email: inputValue,\n      hasEmailError: isEmpty,\n    });\n  }\n\n  /* handleContentChangeという名前のメソッドを定義してください */\n  handleContentChange(event){\n    const inputValue=event.target.value;\n    const isEmpty = inputValue === '';\n    this.setState({\n      content:inputValue,\n      hasContentError:isEmpty\n    })\n  }\n\n  handleSubmit() {\n    this.setState({isSubmitted: true});\n  }\n\n  render() {\n    let emailErrorText;\n    if (this.state.hasEmailError) {\n      emailErrorText = (\n        <p className='contact-message-error'>\n          メールアドレスを入力してください\n        </p>\n      );\n    }\n\n    /* 変数contentErrorTextを定義してください */\n    let contentErrorText;\n\n    /* hasContentErrorを条件にしたif文を作成してください */\n    if (this.state.hasContentError) {\n      contentErrorText = (\n        <p className='contact-message-error'>\n          お問い合わせ内容を入力してください\n        </p>\n      );\n    }\n\n    let contactForm;\n    if (this.state.isSubmitted) {\n      contactForm = (\n        <div className='contact-submit-message'>\n          送信完了\n        </div>\n      );\n    } else {\n      contactForm = (\n        <form onSubmit={() => {this.handleSubmit()}} >\n          <p>e-mail adress</p>\n          <input\n            value={this.state.email}\n            onChange={(event) => {this.handleEmailChange(event)}}\n          />\n          {emailErrorText}\n          <p>contents</p>\n          {/* stateのvalueの値と、onChangeイベントを追加してください */}\n          <textarea\n            value={this.state.content}\n            onChange={(event) => {this.handleContentChange(event)}}\n          />\n          {/* contentErrorTextを表示してください */}\n          {contentErrorText}\n          <input\n            type='submit'\n            value='submit'\n          />\n        </form>\n      );\n    }\n\n    return (\n      <div className='contact-form'>\n        {contactForm}\n      </div>\n    );\n  }\n}\n\nexport default ContactForm;\n"]},"metadata":{},"sourceType":"module"}